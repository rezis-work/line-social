// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  posts Post[] // one to many
  comments Comment[] // one to many
  likes Like[] // one to many

  followers Follows[] @relation("Following")
  following Follows[] @relation("Follower")
  
  notifications Notification[] @relation("UserNotifications")
  notificationsCreated Notification[] @relation("UserNotificationsCreator")
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade delete is delete all posts when user is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[] @relation("NotificationPost")

}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  notifications Notification[] @relation("NotificationComment")
  
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([authorId, postId]) // faster queries
}

model Like {
  id String @id @default(cuid())
  postId String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId]) // this prevents same user from liking same post multiple times
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // relations
  follower User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@index([followerId, followingId])
  @@id([followerId, followingId]) // prevents duplicate follows
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // relations
  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("UserNotificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation("NotificationPost", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("NotificationComment", fields: [commentId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}